#!/usr/bin/env python3
"""
Ejemplo m√°s avanzado de servidor MCP con FastMCP
Este servidor incluye herramientas m√°s pr√°cticas y casos de uso reales
"""

import asyncio
import os
import json
from datetime import datetime, timedelta
from pathlib import Path
from fastmcp import FastMCP

# Crear el servidor MCP avanzado
mcp = FastMCP("Servidor MCP Avanzado")

# ========== HERRAMIENTAS DE SISTEMA ==========

@mcp.tool()
def listar_archivos(directorio: str = ".") -> str:
    """
    Lista los archivos y directorios en una ruta espec√≠fica
    
    Args:
        directorio: Ruta del directorio a listar (por defecto: directorio actual)
    """
    try:
        path = Path(directorio)
        if not path.exists():
            return f"‚ùå El directorio '{directorio}' no existe"
        
        if not path.is_dir():
            return f"‚ùå '{directorio}' no es un directorio"
        
        archivos = []
        directorios = []
        
        for item in path.iterdir():
            if item.is_dir():
                directorios.append(f"üìÅ {item.name}/")
            else:
                size = item.stat().st_size
                archivos.append(f"üìÑ {item.name} ({size} bytes)")
        
        resultado = f"üìÇ Contenido de '{directorio}':\n\n"
        
        if directorios:
            resultado += "Directorios:\n"
            for dir_item in sorted(directorios):
                resultado += f"  {dir_item}\n"
            resultado += "\n"
        
        if archivos:
            resultado += "Archivos:\n"
            for archivo in sorted(archivos):
                resultado += f"  {archivo}\n"
        
        if not directorios and not archivos:
            resultado += "  (directorio vac√≠o)"
        
        return resultado
        
    except Exception as e:
        return f"‚ùå Error al listar archivos: {e}"

@mcp.tool()
def leer_archivo(ruta: str, max_lineas: int = 50) -> str:
    """
    Lee el contenido de un archivo de texto
    
    Args:
        ruta: Ruta del archivo a leer
        max_lineas: N√∫mero m√°ximo de l√≠neas a mostrar (por defecto: 50)
    """
    try:
        path = Path(ruta)
        if not path.exists():
            return f"‚ùå El archivo '{ruta}' no existe"
        
        if not path.is_file():
            return f"‚ùå '{ruta}' no es un archivo"
        
        with open(path, 'r', encoding='utf-8') as file:
            lineas = file.readlines()
        
        total_lineas = len(lineas)
        
        if total_lineas > max_lineas:
            contenido = ''.join(lineas[:max_lineas])
            resultado = f"üìÑ Archivo: {ruta}\n"
            resultado += f"üìä Mostrando las primeras {max_lineas} de {total_lineas} l√≠neas\n\n"
            resultado += contenido
            resultado += f"\n... ({total_lineas - max_lineas} l√≠neas m√°s)"
        else:
            contenido = ''.join(lineas)
            resultado = f"üìÑ Archivo: {ruta}\n"
            resultado += f"üìä Total: {total_lineas} l√≠neas\n\n"
            resultado += contenido
        
        return resultado
        
    except UnicodeDecodeError:
        return f"‚ùå No se puede leer '{ruta}': archivo binario o codificaci√≥n incompatible"
    except Exception as e:
        return f"‚ùå Error al leer archivo: {e}"

# ========== HERRAMIENTAS DE DATOS ==========

@mcp.tool()
def crear_nota(titulo: str, contenido: str) -> str:
    """
    Crea una nota en formato JSON en el directorio actual
    
    Args:
        titulo: T√≠tulo de la nota
        contenido: Contenido de la nota
    """
    try:
        nota = {
            "titulo": titulo,
            "contenido": contenido,
            "fecha_creacion": datetime.now().isoformat(),
            "id": datetime.now().strftime("%Y%m%d_%H%M%S")
        }
        
        nombre_archivo = f"nota_{nota['id']}.json"
        
        with open(nombre_archivo, 'w', encoding='utf-8') as file:
            json.dump(nota, file, indent=2, ensure_ascii=False)
        
        return f"‚úÖ Nota creada: {nombre_archivo}\nüìù T√≠tulo: {titulo}\nüìÖ Fecha: {nota['fecha_creacion']}"
        
    except Exception as e:
        return f"‚ùå Error al crear nota: {e}"

@mcp.tool()
def buscar_texto(patron: str, directorio: str = ".", extension: str = ".txt") -> str:
    """
    Busca un patr√≥n de texto en archivos de un directorio
    
    Args:
        patron: Texto a buscar
        directorio: Directorio donde buscar (por defecto: directorio actual)
        extension: Extensi√≥n de archivos a buscar (por defecto: .txt)
    """
    try:
        path = Path(directorio)
        if not path.exists():
            return f"‚ùå El directorio '{directorio}' no existe"
        
        resultados = []
        archivos_revisados = 0
        
        for archivo in path.glob(f"*{extension}"):
            if archivo.is_file():
                archivos_revisados += 1
                try:
                    with open(archivo, 'r', encoding='utf-8') as file:
                        lineas = file.readlines()
                    
                    for num_linea, linea in enumerate(lineas, 1):
                        if patron.lower() in linea.lower():
                            resultados.append({
                                "archivo": archivo.name,
                                "linea": num_linea,
                                "contenido": linea.strip()
                            })
                except:
                    continue
        
        if not resultados:
            return f"üîç No se encontr√≥ '{patron}' en {archivos_revisados} archivos {extension} en '{directorio}'"
        
        resultado = f"üîç B√∫squeda de '{patron}' en {archivos_revisados} archivos:\n\n"
        
        for match in resultados[:20]:  # Limitar a 20 resultados
            resultado += f"üìÑ {match['archivo']} (l√≠nea {match['linea']}):\n"
            resultado += f"   {match['contenido']}\n\n"
        
        if len(resultados) > 20:
            resultado += f"... y {len(resultados) - 20} resultados m√°s"
        
        return resultado
        
    except Exception as e:
        return f"‚ùå Error en b√∫squeda: {e}"

# ========== RECURSOS ==========

@mcp.resource("file://directorio_trabajo")
async def info_directorio_trabajo() -> str:
    """Informaci√≥n sobre el directorio de trabajo actual"""
    try:
        cwd = os.getcwd()
        path = Path(cwd)
        
        # Contar archivos y directorios
        archivos = sum(1 for x in path.iterdir() if x.is_file())
        directorios = sum(1 for x in path.iterdir() if x.is_dir())
        
        # Informaci√≥n del directorio
        info = {
            "directorio_actual": cwd,
            "total_archivos": archivos,
            "total_directorios": directorios,
            "espacio_total": "N/A",  # Requerir√≠a shutil.disk_usage()
            "ultima_modificacion": datetime.fromtimestamp(path.stat().st_mtime).isoformat()
        }
        
        return json.dumps(info, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"Error obteniendo informaci√≥n del directorio: {e}"

@mcp.resource("config://configuracion_avanzada")
async def configuracion_avanzada() -> str:
    """Configuraci√≥n avanzada del servidor MCP"""
    config = {
        "servidor": {
            "nombre": "Servidor MCP Avanzado",
            "version": "2.0.0",
            "descripcion": "Servidor con herramientas pr√°cticas para gesti√≥n de archivos y datos"
        },
        "herramientas": {
            "sistema": ["listar_archivos", "leer_archivo"],
            "datos": ["crear_nota", "buscar_texto"]
        },
        "recursos": ["info_directorio_trabajo", "configuracion_avanzada"],
        "capacidades": [
            "Gesti√≥n de archivos y directorios",
            "Lectura de archivos de texto",
            "Creaci√≥n de notas en JSON",
            "B√∫squeda de texto en archivos",
            "Informaci√≥n del sistema de archivos"
        ]
    }
    
    return json.dumps(config, indent=2, ensure_ascii=False)

# ========== PROMPTS ==========

@mcp.prompt()
def prompt_gestor_archivos() -> str:
    """Prompt especializado para gesti√≥n de archivos"""
    return """
    Eres un asistente especializado en gesti√≥n de archivos y directorios.
    
    Tienes acceso a las siguientes herramientas:
    
    üóÇÔ∏è GESTI√ìN DE ARCHIVOS:
    - listar_archivos(directorio): Lista contenido de directorios
    - leer_archivo(ruta, max_lineas): Lee archivos de texto
    - crear_nota(titulo, contenido): Crea notas en JSON
    - buscar_texto(patron, directorio, extension): Busca texto en archivos
    
    üìã CONSEJOS DE USO:
    - Siempre verifica que los archivos/directorios existan antes de operaciones
    - Usa rutas relativas cuando sea posible
    - Limita la lectura de archivos grandes especificando max_lineas
    - Para b√∫squedas espec√≠ficas, ajusta la extensi√≥n de archivo
    
    ¬øEn qu√© puedo ayudarte con la gesti√≥n de archivos?
    """

@mcp.prompt()
def prompt_tutorial_mcp() -> str:
    """Prompt educativo sobre MCP"""
    return """
    ¬°Bienvenido al tutorial avanzado de MCP (Model Context Protocol)!
    
    üéØ OBJETIVOS DE APRENDIZAJE:
    1. Entender c√≥mo crear herramientas pr√°cticas
    2. Implementar recursos que accedan a datos reales
    3. Usar prompts para guiar interacciones espec√≠ficas
    4. Manejar errores de manera robusta
    
    üõ†Ô∏è HERRAMIENTAS DISPONIBLES:
    - Gesti√≥n de archivos y directorios
    - Lectura de contenido de archivos
    - Creaci√≥n de notas estructuradas
    - B√∫squeda de texto en m√∫ltiples archivos
    
    üí° EJERCICIOS SUGERIDOS:
    1. Lista los archivos en tu directorio actual
    2. Crea una nota sobre lo que has aprendido de MCP
    3. Busca alg√∫n texto espec√≠fico en tus archivos
    4. Lee el contenido de un archivo de configuraci√≥n
    
    ¬°Empieza a experimentar con estas herramientas!
    """

if __name__ == "__main__":
    # Ejecutar el servidor
    mcp.run()
